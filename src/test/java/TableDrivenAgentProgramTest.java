/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Before;
import org.junit.Test;

import java.util.*;

import static org.junit.Assert.*;

public class TableDrivenAgentProgramTest {

    private static final Action ACTION_1 = new DynamicAction("action1");
    private static final Action ACTION_2 = new DynamicAction("action2");
    private static final Action ACTION_3 = new DynamicAction("action3");

    private Map<List<Percept>, Action> sequences;
    private AbstractAgent agent;

    private static List<Percept> createPerceptSequence(Percept... percepts) {
        List<Percept> perceptSeq = new ArrayList<>();

        Collections.addAll(perceptSeq, percepts);
        return perceptSeq;
    }


    @Before public void setUp() {
        sequences = new HashMap<>();

        sequences.put(createPerceptSequence(
                    new DynamicPercept("key1", "value1")), ACTION_1);
        sequences.put(createPerceptSequence(
                    new DynamicPercept("key1", "value1"),
                    new DynamicPercept("key1", "value2")), ACTION_2);
        sequences.put( createPerceptSequence(
                    new DynamicPercept("key1", "value1"),
                    new DynamicPercept("key1", "value2"),
                    new DynamicPercept("key1", "value3")), ACTION_3);

        agent = new TestAgent(new TableDrivenAgentProgram(sequences));
    }

    @Test public void testTable() {
        assertEquals(2, 2);
    }

    @Test public void testExistingSequences() {
        assertEquals(ACTION_1, agent.execute(new DynamicPercept("key1", "value1")));
        assertEquals(ACTION_2, agent.execute(new DynamicPercept("key1", "value2")));
        assertEquals(ACTION_3, agent.execute(new DynamicPercept("key1", "value3")));
    }

    @Test public void testNonExistingSequence() {
        assertEquals(ACTION_1, agent.execute(new DynamicPercept("key1", "value1")));
        assertEquals(NoOpAction.NO_OP, agent.execute(new DynamicPercept("key1", "value3")));
    }
}


